// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id           Int     @id @unique
  name         String
  phone        Int     @unique
  email        String  @unique
  password     String
  company_name String?
  image        String? @db.LongText

  payment_methods payment_method[]
  address         address[]
  products        product[]
  comments        comment[]
  transactions    transaction_header[]
  roles           user_role[]
  answers         answer[]
}

model user_role {
  id_user Int
  id_role Int

  user user @relation(fields: [id_user], references: [id])
  role role @relation(fields: [id_role], references: [id])

  @@id([id_user, id_role])
}

model role {
  id          Int    @id @default(autoincrement())
  description String

  users user_role[]
}

model address {
  id          Int    @id @default(autoincrement())
  id_user     Int
  province    String
  canton      String
  district    String
  direction   String
  postal_code String
  phone       Int

  transactions transaction_header[]
  user         user                 @relation(fields: [id_user], references: [id])
}

model payment_method {
  id              Int      @id @default(autoincrement())
  id_user         Int
  type            String
  provider        String
  account_number  String   @unique
  expiration_date DateTime

  transactions transaction_header[]
  user         user                 @relation(fields: [id_user], references: [id])
}

model transaction_header {
  id                Int      @id @default(autoincrement())
  id_user           Int
  id_payment_method Int
  id_address        Int
  total             Decimal
  created_at        DateTime
  payed             Boolean

  details        transaction_detail[]
  user           user                 @relation(fields: [id_user], references: [id])
  payment_method payment_method       @relation(fields: [id_payment_method], references: [id])
  address        address              @relation(fields: [id_address], references: [id])
}

model transaction_detail {
  id          Int       @id @default(autoincrement())
  id_header   Int
  id_product  Int
  quantity    Int
  subtotal    Decimal
  arrivalDate DateTime?

  client_rating   Int?
  seller_rating   Int?
  client_feedback String?
  seller_feedback String?

  header  transaction_header @relation(fields: [id_header], references: [id])
  product product            @relation(fields: [id_product], references: [id])
}

model type {
  id          Int       @id @default(autoincrement())
  description String
  products    product[]
}

model product {
  id          Int     @id @default(autoincrement())
  id_user     Int
  id_type     Int
  name        String
  description String  @db.LongText
  quantity    Int
  price       Decimal

  transactions transaction_detail[]
  type         type                 @relation(fields: [id_type], references: [id])
  user         user                 @relation(fields: [id_user], references: [id])
  categories   product_category[]
  images       image[]
  comments     comment[]
}

model product_category {
  id_product  Int
  id_category Int

  product  product  @relation(fields: [id_product], references: [id])
  category category @relation(fields: [id_category], references: [id])

  @@id([id_product, id_category])
}

model category {
  id          Int                @id @default(autoincrement())
  description String
  products    product_category[]
}

model image {
  id         Int     @id @default(autoincrement())
  id_product Int
  image      String  @db.LongText
  product    product @relation(fields: [id_product], references: [id])
}

model comment {
  id         Int      @id @default(autoincrement())
  id_product Int
  id_user    Int
  text       String
  created_at DateTime

  answers answer[]
  user    user     @relation(fields: [id_user], references: [id])
  product product  @relation(fields: [id_product], references: [id])
}

model answer {
  id         Int      @id @default(autoincrement())
  id_comment Int
  id_user    Int
  text       String
  created_at DateTime

  comment comment @relation(fields: [id_comment], references: [id])
  user    user    @relation(fields: [id_user], references: [id])
}
